---------------------------------------------------------------------------------
--- Procedimiento almacenado (no hace calculos), modifica bases de datos o tablas
---------------------------------------------------------------------------------
-- creando tablas
CREATE TABLE cuentas1(
    id INT GENERATED BY DEFAULT AS IDENTITY,
    cliente VARCHAR(100) NOT NULL,
    balance numeric NOT NULL
);
-- insertando registros a las tabla creada
INSERT INTO cuentas1 (cliente,balance)
VALUES('Jorge',10000),
	  ('Héctor',10000),
	  ('Ramón',10000),
	  ('Luis',10000),
      ('José',10000),
      ('Sofía',10000),
      ('Leticia',10000),
      ('Gloria',10000);
	  
-- mostrando tabla
select *from cuentas1;
-- procedo a crear un procedimiento  que se va a llamar "Transferir"
create or replace procedure transferir(int, int, numeric)
language plpgsql    
as 
$$
begin
---- actualizando precio. donde el ID sea el primer valor de transferir(int, int, numeric),
---- el balance me los vas a cambiar por el valor que este en ese ID y le restas el tercer lugar de transferir(int, int, numeric)
    update cuentas1 set balance = balance - $3 where id = $1; 
    update cuentas1 set balance = balance + $3 where id = $2;
end;
$$;
--- procedemos a usar el procedimiento almacenado, mandando 
--call transferir(1, 8, 200)
--drop TABLE cuentas1
--------------------------------------------------------------------------------------------------
--- Uso de TRIGGERS o disparadores
---- antes de cada modificacion de la tabla cuentas 1,  quiero una tabla que me registr como eran los datos antes de realizar cambios
---- para esto creo la siguiente tabla
create table cuentas_antes(
	id INT GENERATED BY DEFAULT AS IDENTITY,
    cliente VARCHAR(100) NOT NULL,
    balance numeric NOT NULL,
	usuario varchar(250) NOT NULL,
	Fecha date,
	tiempo time)
--- creando funcion que llena la tabla cuentas antes, antes de modificar la tabla
create or replace function revisar() returns trigger
as
$$
declare
    Usuario Varchar(250) = user; --- me da un registro de quien realizó la modificación de la tabla
    Fecha date = current_date;--- me da la fecha en que sé modificó la tabla
    Tiempo time = current_time; --- me da la hora en que sé modificó la tabla 
begin
    INSERT INTO cuentas_antes values (old.id,old.cliente,old.balance, Usuario, Fecha, Tiempo);
    return new;
end
$$
language plpgsql


create trigger antes_actualizar --- crea el disparador, asociado a la tabla cuentas1
before update on cuentas1 --- se activa cuando (antes de realiazar cualquier cambio )
for each row execute procedure revisar(); --- qué es lo que va a realizar el disparador.
--- procedemos a modificar la tabla. Desde sofia le voy a mandar a gloria 1500
call transferir(8, 7, 1500)
--- revisando
select *from cuentas1;
-- revisando tabla que me muestra quien realizó los cambios, y como eran los datos antes de la modificación
select *from cuentas_antes;
-----------------------------------------------------------------------------------------------------------
--- segundo ejemplo de disparadores}
-----------------------------------------------------------------------------------------------------------
-- creando tabla cuentas
CREATE TABLE cuentas (
    id SERIAL PRIMARY KEY,
    cliente_id INT NOT NULL,
    balance NUMERIC NOT NULL CHECK (balance >= 0)
);
-- Insertar registros en la tabla cuentas
INSERT INTO cuentas (cliente_id, balance)
VALUES 
    (1, 10000),
    (1, 5000),
    (2, 20000),
    (3, 15000),
    (1, 3000);
---Crear totales, me dice cuanto tiene cada cliente
create table totales as
	select cliente_id, sum(balance) as total_balance
	from cuentas
	group by cliente_id; 
select *from totales;
--- voy a crear un disparador que, si llega un nuevo cliente, o si un un cliente abre una nueva cuenta y agregue dinero, en automatico se 
-- registre el cambio en la tabla totales. Es decir, esta tabla totales se actualice automaticamente.
-- Crear la función de actualización
CREATE OR REPLACE FUNCTION actualizar_totales()
RETURNS TRIGGER AS $$
BEGIN
    -- Actualiza el total del cliente afectado, si llega un cliente nuevo, actualiza la tabla totales
    UPDATE totales
    SET total_balance = (SELECT SUM(balance) FROM cuentas WHERE cliente_id = NEW.cliente_id)
    WHERE cliente_id = NEW.cliente_id;

    -- Si no existe un registro en totales para este cliente, lo insertamos en la tabla totales.
    IF NOT FOUND THEN
        INSERT INTO totales (cliente_id, total_balance)
        VALUES (NEW.cliente_id, New.balance);
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Crear el disparador
CREATE TRIGGER trigger_actualizar_totales
AFTER INSERT OR UPDATE OR DELETE ON cuentas
FOR EACH ROW
EXECUTE FUNCTION actualizar_totales();
-- visualizando tablas
select * from totales;
select * from cuentas;
--- supongamos que nos llega un nuevo cliente: y le agrega 1700
insert into cuentas(cliente_id,balance) values (1,1700);
-- llega un cleinte nuevo y abre una cuenta con 13500
insert into cuentas(cliente_id,balance) values (10,13500);

insert into cuentas(cliente_id,balance) values (2,12000);
